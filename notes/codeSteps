


create it
  rails new custard --database postgresql
  bundle install
  rake db:create  
   (spring stop
    There is a bug in Spring with Rails 4.1 which causes generators to hang.)
  rails generate scaffold facility name:string address:string --timestamps
  rails generate scaffold product facility_id:integer flavor:string mid:integer state:string   packaged:datetime opened:datetime  --timestamps

  rake db:migrate

boot it up with no data
  rails s


wire up the model relationships
  facility
    include CsvModelMixin
    has_many :product
  product
    include CsvModelMixin
    belongs_to :facility

bring in CSV for loading

  copy code from code/application_helper.rb into   app/helpers/application_helper.rb

  copy over code/csv_controller_mixin.rb to 
    app/controllers/concerns/csv_controller_mixin.rb
  copy over code/csv_model_mixin.rb to 
    app/models/concerns/csv_model_mixin.rb
 
  in controllers for facility, products
    include CsvControllerMixin

    inside def index add this ... to product

    respond_to do |format|
      format.html
      format.csv { send_data Product.exportCSV }
    end

    inside def index add this ... to facilty

    respond_to do |format|
      format.html
      format.csv { send_data Facility.exportCSV }
    end


  in view index.html.erb for facilities and products
    <%= csv_upload import_facilities_path %>
    <%= csv_upload import_products_path %>

  in config/routes.rb   add to facilities, and products
    do 
      collection { post :import}
    end


Load up some data and show it
  upload
    http://localhost:3000/facilities
  download
    http://localhost:3000/facilities.csv

  prepare the products for upload by referencing in the foreign key
    cp products.csv products_id.csv
    swap out text for the foreign key id's
  upload    
    http://localhost:3000/products_id.csv


bring in display page
  in Facility_controller.rb
  def prod_list
    @facid = params[:facility] || '1'
    @facility = Facility.find(@facid)
    logger.info("@facid is #{@facid}")
    @prd = Product.where('facility_id = ' + @facid)


    respond_to do | format |
      format.html
      format.json { @prd.to_json }
    end
  end

  in routes.rb
    resources :facilities do
      collection { 
        post :import
        get  :prod_list
      }
    end

  copy over prod_list.html.erb to app/views/facilities




add more formatting to the display page
  test grouping ... if load is not in order of flavors
  add breaks for flavor changes if possible
  better data sets -- more variety between stores



